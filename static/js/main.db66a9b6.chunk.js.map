{"version":3,"sources":["components/Dropzone/index.tsx","helper/EdgeDetection.js","pages/Home/index.tsx","App.tsx","index.tsx"],"names":["Dropzone","onFileUploaded","useState","selectedFile","setSelectedFile","onDrop","useCallback","acceptedFiles","file","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","className","accept","length","src","alt","detectEdge","img","cannyEdgeDetector","lowThreshold","highThreshold","gaussianBlur","gaussianFilter","toDataURL","Home","setFile","imageURL","setImageURL","a","reader","FileReader","onload","binaryStr","result","Image","load","then","greyImage","grey","processedImage","readAsArrayBuffer","useEffect","handleFileChanged","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAuCeA,G,MA9BmB,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eAAqB,EAEjBC,mBAAS,IAFQ,mBAEjDC,EAFiD,KAEpCC,EAFoC,KAIlDC,EAASC,uBAAY,SAACC,GAC1B,IAAMC,EAAOD,EAAc,GAC3BH,EAAgBK,IAAIC,gBAAgBF,IACpCP,EAAeO,KACd,CAACP,IARoD,EAUFU,YAAY,CAAEN,WAA5DO,EAVgD,EAUhDA,aAAcC,EAVkC,EAUlCA,cAAeC,EAVmB,EAUnBA,aAErC,OACE,uCAAKC,UAAU,YAAeH,KAC5B,2CAAWC,IAAX,CAA4BG,OAAO,aAEjCF,EACE,sDAEEX,EAAac,OACb,yBAAKF,UAAU,QAAQG,IAAKf,EAAcgB,IAAI,aAEhD,+E,gBCpBKC,MATf,SAAqBC,GAMjB,OALaC,YAAkBD,EAAI,CAC/BE,aAAc,GACdC,cAAe,GACfC,aAAc,MACfC,iBACSC,aC+CDC,G,OA/CF,WAAO,IAAD,EACS1B,qBADT,mBACRM,EADQ,KACFqB,EADE,OAEiB3B,mBAAS,IAF1B,mBAER4B,EAFQ,KAEEC,EAFF,iDAYf,WAAiCvB,GAAjC,eAAAwB,EAAA,uDACUC,EAAS,IAAIC,YAEZC,OAAS,WACZ,IAAMC,EAAYH,EAAOI,OACpBD,GAGLE,IAAMC,KAAKH,GAAWI,MAAK,SAACnB,GACxB,IAAMoB,EAAYpB,EAAIqB,OAChBC,EAAiBvB,EAAWqB,GAClCV,EAAYY,OAGpBV,EAAOW,kBAAkBpC,GAd7B,4CAZe,sBA4Bf,OAxBAqC,qBAAU,WACDrC,GALM,oCAQXsC,CAAkBtC,KAEnB,CAACA,IAmBA,yBAAKO,UAAU,iBACX,yBAAKA,UAAU,UACX,yDAEJ,yBAAKA,UAAU,WACX,yBAAKA,UAAU,eACX,kBAAC,EAAD,CAAUd,eAAgB4B,KAE9B,yBAAKd,UAAU,eAEPe,EAAW,yBAAKf,UAAU,QAAQG,IAAKY,EAAUX,IAAI,eAAkB,2ECpChF4B,MANf,WACE,OACE,kBAAC,EAAD,OCHJC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.db66a9b6.chunk.js","sourcesContent":["import React, { useCallback, useState } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\n\r\nimport './styles.css'\r\n\r\ninterface Props {\r\n  onFileUploaded: (file: File) => void\r\n}\r\n\r\nconst Dropzone: React.FC<Props> = ({ onFileUploaded }) => {\r\n\r\n  const [selectedFile,setSelectedFile] = useState('')\r\n\r\n  const onDrop = useCallback((acceptedFiles: File[]) => {\r\n    const file = acceptedFiles[0]\r\n    setSelectedFile(URL.createObjectURL(file))\r\n    onFileUploaded(file)\r\n  }, [onFileUploaded])\r\n  \r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n  return (\r\n    <div className='dropzone' {...getRootProps()}>\r\n      <input {...getInputProps()} accept='image/*' />\r\n      {\r\n        isDragActive ?\r\n          <h2>Solte a imagem aqui...</h2> :\r\n          (\r\n            selectedFile.length ? \r\n            <img className='image' src={selectedFile} alt='Original' />\r\n            :\r\n          <h2>Arraste uma imagem ou clique para selecionar</h2>\r\n          )\r\n          \r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dropzone","import cannyEdgeDetector from 'canny-edge-detector';\r\n\r\nfunction detectEdge( img ) {\r\n    const edge = cannyEdgeDetector(img,{\r\n        lowThreshold: 40,\r\n        highThreshold: 70,\r\n        gaussianBlur: 2.5,\r\n    }).gaussianFilter()\r\n    return edge.toDataURL()\r\n}\r\n\r\nexport default detectEdge","import React, { useState, useEffect } from 'react'\r\nimport Dropzone from '../../components/Dropzone'\r\nimport { Image } from 'image-js'\r\n\r\nimport detectEdge from '../../helper/EdgeDetection'\r\nimport './styles.css'\r\n\r\n\r\nconst Home = () => {\r\n    const [file, setFile] = useState<File>()\r\n    const [imageURL, setImageURL] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (!file)\r\n            return\r\n\r\n        handleFileChanged(file)\r\n\r\n    }, [file])\r\n\r\n    async function handleFileChanged(file: File) {\r\n        const reader = new FileReader()\r\n\r\n        reader.onload = () => {\r\n            const binaryStr = reader.result\r\n            if (!binaryStr)\r\n                return\r\n\r\n            Image.load(binaryStr).then((img: Image) => {\r\n                const greyImage = img.grey()\r\n                const processedImage = detectEdge(greyImage)\r\n                setImageURL(processedImage)\r\n            })\r\n        }\r\n        reader.readAsArrayBuffer(file)\r\n    }\r\n    return (\r\n        <div className='pageContainer'>\r\n            <div className='header'>\r\n                <h1>Detecção de cantos</h1>\r\n            </div>\r\n            <div className='content'>\r\n                <div className='imageHolder'>\r\n                    <Dropzone onFileUploaded={setFile} />\r\n                </div>\r\n                <div className='imageHolder'>\r\n                    {\r\n                        imageURL ? <img className='image' src={imageURL} alt='Processada' /> : <h2>A imagem processada aparecerá aqui!</h2>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","import React from 'react';\nimport './App.css';\n\nimport Home from './pages/Home'\n\nfunction App() {\n  return (\n    <Home />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}