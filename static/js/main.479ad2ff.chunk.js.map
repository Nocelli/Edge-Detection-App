{"version":3,"sources":["components/Dropzone/index.tsx","components/InformationModal/index.tsx","helper/EdgeDetection.js","pages/Home/index.tsx","App.tsx","index.tsx"],"names":["Dropzone","onFileUploaded","useState","selectedFile","setSelectedFile","onDrop","useCallback","acceptedFiles","file","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","className","accept","length","src","alt","InformationModal","isOpen","setIsOpen","onClick","href","detectEdge","img","cannyEdgeDetector","lowThreshold","highThreshold","gaussianBlur","gaussianFilter","toDataURL","Home","setFile","imageURL","setImageURL","a","reader","FileReader","onload","binaryStr","result","Image","load","then","greyImage","grey","processedImage","readAsArrayBuffer","useEffect","handleFileChanged","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OA2CeA,G,MAjCmB,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eAAqB,EAEjBC,mBAAS,IAFQ,mBAEjDC,EAFiD,KAEpCC,EAFoC,KAIlDC,EAASC,uBAAY,SAACC,GAC1B,IAAMC,EAAOD,EAAc,GAC3BH,EAAgBK,IAAIC,gBAAgBF,IACpCP,EAAeO,KACd,CAACP,IARoD,EAUFU,YAAY,CAAEN,WAA5DO,EAVgD,EAUhDA,aAAcC,EAVkC,EAUlCA,cAAeC,EAVmB,EAUnBA,aAErC,OACE,uCAAKC,UAAU,YAAeH,KAC5B,2CAAWC,IAAX,CAA4BG,OAAO,aAEjCF,EACE,sDAEEX,EAAac,OACb,yBAAKF,UAAU,QAAQG,IAAKf,EAAcgB,IAAI,aAE9C,yBAAKJ,UAAU,gBACb,kBAAC,IAAD,CAAUA,UAAU,iBACpB,gFCeCK,G,MAvC2B,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,UACjD,OAAKD,EAID,yBAAKN,UAAU,mBACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,eACX,iDACA,4BAAQQ,QAAS,kBAAMD,GAAWD,KAC9B,kBAAC,IAAD,MACA,0CAGR,yBAAKN,UAAU,aACX,wDACA,sWACA,qDACA,6DACA,qEACA,oPACA,uEACA,kDACA,gFACA,sEACA,oEACA,mFACA,+GACA,uCACA,uBAAGS,KAAK,kKAAR,2BACA,uBAAGA,KAAK,+GAAR,0BACA,uBAAGA,KAAK,4IAAR,yBA7BL,O,wBCDAC,MATf,SAAqBC,GAMjB,OALaC,YAAkBD,EAAI,CAC/BE,aAAc,GACdC,cAAe,GACfC,aAAc,MACfC,iBACSC,aCyDDC,G,OAvDF,WAAO,IAAD,EACS/B,qBADT,mBACRM,EADQ,KACF0B,EADE,OAEiBhC,mBAAS,IAF1B,mBAERiC,EAFQ,KAEEC,EAFF,OAGalC,oBAAkB,GAH/B,mBAGRmB,EAHQ,KAGAC,EAHA,iDAaf,WAAiCd,GAAjC,eAAA6B,EAAA,uDACUC,EAAS,IAAIC,YAEZC,OAAS,WACZ,IAAMC,EAAYH,EAAOI,OACpBD,GAGLE,IAAMC,KAAKH,GAAWI,MAAK,SAACnB,GACxB,IAAMoB,EAAYpB,EAAIqB,OAChBC,EAAiBvB,EAAWqB,GAClCV,EAAYY,OAGpBV,EAAOW,kBAAkBzC,GAd7B,4CAbe,sBA6Bf,OAxBA0C,qBAAU,WACD1C,GANM,oCASX2C,CAAkB3C,KAEnB,CAACA,IAmBA,oCACI,yBAAKO,UAAU,iBACX,yBAAKA,UAAU,UACX,wDACA,4BAAQA,UAAU,aAAaQ,QAAS,kBAAMD,GAAWD,KACrD,8BAAM,kBAAC,IAAD,OACN,2EAGR,yBAAKN,UAAU,WACX,yBAAKA,UAAU,eACX,kBAAC,EAAD,CAAUd,eAAgBiC,KAE9B,yBAAKnB,UAAU,eAEPoB,EAAW,yBAAKpB,UAAU,QAAQG,IAAKiB,EAAUhB,IAAI,eAAkB,yEAKvF,kBAAC,EAAD,CAAkBE,OAAQA,EAAQC,UAAWA,OCjD1C8B,MANf,WACE,OACE,kBAAC,EAAD,OCHJC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.479ad2ff.chunk.js","sourcesContent":["import React, { useCallback, useState } from 'react'\r\nimport { FiUpload } from 'react-icons/fi';\r\nimport { useDropzone } from 'react-dropzone'\r\n\r\nimport './styles.css'\r\n\r\ninterface Props {\r\n  onFileUploaded: (file: File) => void\r\n}\r\n\r\nconst Dropzone: React.FC<Props> = ({ onFileUploaded }) => {\r\n\r\n  const [selectedFile,setSelectedFile] = useState('')\r\n\r\n  const onDrop = useCallback((acceptedFiles: File[]) => {\r\n    const file = acceptedFiles[0]\r\n    setSelectedFile(URL.createObjectURL(file))\r\n    onFileUploaded(file)\r\n  }, [onFileUploaded])\r\n  \r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n  return (\r\n    <div className='dropzone' {...getRootProps()}>\r\n      <input {...getInputProps()} accept='image/*' />\r\n      {\r\n        isDragActive ?\r\n          <h2>Solte a imagem aqui...</h2> :\r\n          (\r\n            selectedFile.length ? \r\n            <img className='image' src={selectedFile} alt='Original' />\r\n            :\r\n            <div className='dropzoneText'>\r\n              <FiUpload className='dropzoneIcon'/>\r\n              <h2>Arraste uma imagem ou clique para selecionar</h2>\r\n            </div>\r\n          )\r\n          \r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dropzone","import React from 'react'\r\nimport { FiX } from 'react-icons/fi'\r\nimport './styles.css'\r\n\r\ninterface Props {\r\n    isOpen: boolean\r\n    setIsOpen: (newValue: boolean) => void\r\n}\r\n\r\n\r\nconst InformationModal: React.FC<Props> = ({ isOpen, setIsOpen }) => {\r\n    if (!isOpen)\r\n        return null\r\n\r\n    return (\r\n        <div className='modalBackground'>\r\n            <div className='modalContent'>\r\n                <div className='modalHeader'>\r\n                    <h1>Informações</h1>\r\n                    <button onClick={() => setIsOpen(!isOpen)} >\r\n                        <FiX />\r\n                        <span>Fechar</span>\r\n                    </button>\r\n                </div>\r\n                <div className='modalBody'>\r\n                    <h2>Por que detectar bordas?</h2>\r\n                    <h3>A detecção de borda é bastante usada na área de extração de características. Sua utilização reduz significativamente a quantidade de dados a serem processados, e descarta informação que é considerada menos relevante, ainda que preservando importantes propriedades estruturais de uma imagem.</h3>\r\n                    <h2>Como detectar bordas?</h2>\r\n                    <h3>Usando o gradiente da imagem!</h3>\r\n                    <h2>O que é o gradiente de uma imagem?</h2>\r\n                    <h3>O gradiente de uma imagem é um campo vetorial tal como em qualquer função de duas variáveis, exemplo: uma função 'f(x,y)', que representa o nível de cor em uma determinada coordenada '(x,y)'.</h3>\r\n                    <h2>Qual método foi usado nesse projeto?</h2>\r\n                    <h3>Algoritmo de Canny</h3>\r\n                    <h2>Métodos usuais para detecção de bordas:</h2>\r\n                    <h4>Sobel: provavelmente o mais utilizado.</h4>\r\n                    <h4>Prewitt: similar ao método Sobel.</h4>\r\n                    <h4>Roberts: um dos primeiros métodos desenvolvidos.</h4>\r\n                    <h4>Canny: o melhor método, mas é o que exige maior esforço computacional.</h4>\r\n                    <h2>Fontes:</h2>\r\n                    <a href='https://pt.wikipedia.org/wiki/Detec%C3%A7%C3%A3o_de_borda#:~:text=A%20detec%C3%A7%C3%A3o%20de%20borda%20%C3%A9,propriedades%20estruturais%20de%20uma%20imagem.'>Detecção de borda</a>\r\n                    <a href='https://edisciplinas.usp.br/pluginfile.php/4301995/mod_resource/content/0/V10%20-Deteccao%20de%20bordas.pdf'>Visão Computacional</a>\r\n                    <a href='https://en.wikipedia.org/wiki/Canny_edge_detector#:~:text=The%20Canny%20edge%20detector%20is,explaining%20why%20the%20technique%20works.'>Algoritmo de Canny</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default InformationModal","import cannyEdgeDetector from 'canny-edge-detector';\r\n\r\nfunction detectEdge( img ) {\r\n    const edge = cannyEdgeDetector(img,{\r\n        lowThreshold: 40,\r\n        highThreshold: 70,\r\n        gaussianBlur: 2.5,\r\n    }).gaussianFilter()\r\n    return edge.toDataURL()\r\n}\r\n\r\nexport default detectEdge","import React, { useState, useEffect } from 'react'\r\nimport Dropzone from '../../components/Dropzone'\r\nimport InformationModal from '../../components/InformationModal'\r\nimport { BsInfoCircle } from 'react-icons/bs'\r\nimport { Image } from 'image-js'\r\n\r\nimport detectEdge from '../../helper/EdgeDetection'\r\nimport './styles.css'\r\n\r\n\r\nconst Home = () => {\r\n    const [file, setFile] = useState<File>()\r\n    const [imageURL, setImageURL] = useState('')\r\n    const [isOpen, setIsOpen] = useState<boolean>(false)\r\n\r\n    useEffect(() => {\r\n        if (!file)\r\n            return\r\n\r\n        handleFileChanged(file)\r\n\r\n    }, [file])\r\n\r\n    async function handleFileChanged(file: File) {\r\n        const reader = new FileReader()\r\n\r\n        reader.onload = () => {\r\n            const binaryStr = reader.result\r\n            if (!binaryStr)\r\n                return\r\n\r\n            Image.load(binaryStr).then((img: Image) => {\r\n                const greyImage = img.grey()\r\n                const processedImage = detectEdge(greyImage)\r\n                setImageURL(processedImage)\r\n            })\r\n        }\r\n        reader.readAsArrayBuffer(file)\r\n    }\r\n    return (\r\n        <>\r\n            <div className='pageContainer'>\r\n                <div className='header'>\r\n                    <h1>Detecção de bordas</h1>\r\n                    <button className='infoButton' onClick={() => setIsOpen(!isOpen)} >\r\n                        <span><BsInfoCircle /></span>\r\n                        <h2>Por que detectar bordas?, como? e mais...</h2>\r\n                    </button>\r\n                </div>\r\n                <div className='content'>\r\n                    <div className='imageHolder'>\r\n                        <Dropzone onFileUploaded={setFile} />\r\n                    </div>\r\n                    <div className='imageHolder'>\r\n                        {\r\n                            imageURL ? <img className='image' src={imageURL} alt='Processada' /> : <h2>A imagem processada aparecerá aqui!</h2>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <InformationModal isOpen={isOpen} setIsOpen={setIsOpen}/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Home","import React from 'react';\nimport './App.css';\n\nimport Home from './pages/Home'\n\nfunction App() {\n  return (\n    <Home />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}